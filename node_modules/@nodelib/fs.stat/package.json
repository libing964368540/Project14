{
  "_args": [
    [
      {
        "raw": "@nodelib/fs.stat@^2.0.2",
        "scope": "@nodelib",
        "escapedName": "@nodelib%2ffs.stat",
        "name": "@nodelib/fs.stat",
        "rawSpec": "^2.0.2",
        "spec": ">=2.0.2 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Administrator\\Desktop\\me\\web-gulp\\SHSSVIEW\\node_modules\\fast-glob"
    ]
  ],
  "_cnpm_publish_time": 1570173163265,
  "_from": "@nodelib/fs.stat@^2.0.2",
  "_hasShrinkwrap": false,
  "_id": "@nodelib/fs.stat@2.0.3",
  "_location": "/@nodelib/fs.stat",
  "_nodeVersion": "12.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fs.stat_2.0.3_1570173163141_0.7325395787436761"
  },
  "_npmUser": {
    "name": "mrmlnc",
    "email": "dmalinochkin@rambler.ru"
  },
  "_npmVersion": "lerna/3.16.4/node@v12.8.0+x64 (win32)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@nodelib/fs.stat@^2.0.2",
    "scope": "@nodelib",
    "escapedName": "@nodelib%2ffs.stat",
    "name": "@nodelib/fs.stat",
    "rawSpec": "^2.0.2",
    "spec": ">=2.0.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@nodelib/fs.scandir",
    "/fast-glob"
  ],
  "_resolved": "https://registry.npm.taobao.org/@nodelib/fs.stat/download/@nodelib/fs.stat-2.0.3.tgz",
  "_shasum": "34dc5f4cabbc720f4e60f75a747e7ecd6c175bd3",
  "_shrinkwrap": null,
  "_spec": "@nodelib/fs.stat@^2.0.2",
  "_where": "C:\\Users\\Administrator\\Desktop\\me\\web-gulp\\SHSSVIEW\\node_modules\\fast-glob",
  "dependencies": {},
  "description": "Get the status of a file with some features",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "34dc5f4cabbc720f4e60f75a747e7ecd6c175bd3",
    "size": 4078,
    "noattachment": false,
    "tarball": "https://registry.npm.taobao.org/@nodelib/fs.stat/download/@nodelib/fs.stat-2.0.3.tgz"
  },
  "engines": {
    "node": ">= 8"
  },
  "gitHead": "3b1ef7554ad7c061b3580858101d483fba847abf",
  "keywords": [
    "NodeLib",
    "fs",
    "FileSystem",
    "file system",
    "stat"
  ],
  "license": "MIT",
  "main": "out/index.js",
  "maintainers": [
    {
      "name": "mrmlnc",
      "email": "dmalinochkin@rambler.ru"
    }
  ],
  "name": "@nodelib/fs.stat",
  "optionalDependencies": {},
  "publish_time": 1570173163265,
  "readme": "# @nodelib/fs.stat\n\n> Get the status of a file with some features.\n\n## :bulb: Highlights\n\nWrapper around standard method `fs.lstat` and `fs.stat` with some features.\n\n* :beginner: Normally follows symbolic link.\n* :gear: Can safely work with broken symbolic link.\n\n## Install\n\n```console\nnpm install @nodelib/fs.stat\n```\n\n## Usage\n\n```ts\nimport * as fsStat from '@nodelib/fs.stat';\n\nfsStat.stat('path', (error, stats) => { /* … */ });\n```\n\n## API\n\n### .stat(path, [optionsOrSettings], callback)\n\nReturns an instance of `fs.Stats` class for provided path with standard callback-style.\n\n```ts\nfsStat.stat('path', (error, stats) => { /* … */ });\nfsStat.stat('path', {}, (error, stats) => { /* … */ });\nfsStat.stat('path', new fsStat.Settings(), (error, stats) => { /* … */ });\n```\n\n### .statSync(path, [optionsOrSettings])\n\nReturns an instance of `fs.Stats` class for provided path.\n\n```ts\nconst stats = fsStat.stat('path');\nconst stats = fsStat.stat('path', {});\nconst stats = fsStat.stat('path', new fsStat.Settings());\n```\n\n#### path\n\n* Required: `true`\n* Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n* Required: `false`\n* Type: `Options | Settings`\n* Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settings) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings([options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsStat.Settings({ followSymbolicLink: false });\n\nconst stats = fsStat.stat('path', settings);\n```\n\n## Options\n\n### `followSymbolicLink`\n\n* Type: `boolean`\n* Default: `true`\n\nFollow symbolic link or not. Call `fs.stat` on symbolic link if `true`.\n\n### `markSymbolicLink`\n\n* Type: `boolean`\n* Default: `false`\n\nMark symbolic link by setting the return value of `isSymbolicLink` function to always `true` (even after `fs.stat`).\n\n> :book: Can be used if you want to know what is hidden behind a symbolic link, but still continue to know that it is a symbolic link.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n* Type: `boolean`\n* Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n### `fs`\n\n* Type: [`FileSystemAdapter`](./src/adapters/fs.ts)\n* Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat?: typeof fs.lstat;\n\tstat?: typeof fs.stat;\n\tlstatSync?: typeof fs.lstatSync;\n\tstatSync?: typeof fs.statSync;\n}\n\nconst settings = new fsStat.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodelib/nodelib/tree/master/packages/fs/fs.stat"
  },
  "scripts": {
    "build": "npm run clean && npm run compile && npm run lint && npm test",
    "clean": "rimraf {tsconfig.tsbuildinfo,out}",
    "compile": "tsc -b .",
    "compile:watch": "tsc -p . --watch --sourceMap",
    "lint": "eslint \"src/**/*.ts\" --cache",
    "test": "mocha \"out/**/*.spec.js\" -s 0",
    "watch": "npm run clean && npm run compile:watch"
  },
  "typings": "out/index.d.ts",
  "version": "2.0.3"
}
